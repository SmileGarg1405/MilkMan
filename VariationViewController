/**
 * Sample Skeleton for 'variationView.fxml' Controller Class
 */

package variationLog;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;

import com.mysql.jdbc.PreparedStatement;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.FileChooser;
import variationLog.variationBean;
import variationLog.DBConnection;

public class variationViewController 
{
	Connection con;
    @FXML // ResourceBundle that was given to the FXMLLoader
    private ResourceBundle resources;

    @FXML // URL location of the FXML file that was given to the FXMLLoader
    private URL location;

    @FXML // fx:id="comboName"
    private ComboBox<String> comboName; // Value injected by FXMLLoader

    @FXML // fx:id="dtpFrom"
    private DatePicker dtpFrom; // Value injected by FXMLLoader

    @FXML // fx:id="dtpTo"
    private DatePicker dtpTo; // Value injected by FXMLLoader

    @FXML // fx:id="tblShow"
    private TableView<variationBean> tblShow; // Value injected by FXMLLoader

    @FXML
    void doExcel(ActionEvent event) throws IOException 
    {
    	Writer writer = null;
        try {
        	FileChooser chooser=new FileChooser();
	    	
        	chooser.setTitle("Select Path:");
        	
        	chooser.getExtensionFilters().addAll(
                    new FileChooser.ExtensionFilter("All Files", "*.*")
                    
                );
        	 File file=chooser.showSaveDialog(null);
        	String filePath=file.getAbsolutePath();
        	if(!(filePath.endsWith(".csv")||filePath.endsWith(".CSV")))
        	{
        		filePath=filePath+".csv";
        	}
        	 file = new File(filePath);
            writer = new BufferedWriter(new FileWriter(file));
            String text="Name,Date,Cow Milk Qty.,Buffalo Milk Qty.\n";
            writer.write(text);
            for (variationBean p : list)
            {
				text = p.getName()+ "," + p.getDate()+ "," + p.getCqty()+ "," + p.getBqty()+ "\n";
                writer.write(text);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        finally {
           
            writer.flush();
             writer.close();
        }
    }

    @FXML
    void doFind(ActionEvent event) 
    {

    	String name=comboName.getSelectionModel().getSelectedItem();
    	try {
			 PreparedStatement  pst=(PreparedStatement) con.prepareStatement("select * from variationtable where CName=?");
			 pst.setString(1, name);
			 
			 getAllRecordsFromTable(pst);
		} 
		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
   	tblShow.setItems(list);//5
    	
    }

    @FXML
    void doGet(ActionEvent event) 
    {
    	dtpFrom.getEditor().setText("");
    	dtpTo.getEditor().setText("");
    	comboName.getSelectionModel().select(-1);
    	try 
    	{
			 PreparedStatement  pst=(PreparedStatement) con.prepareStatement("select * from variationtable");
			 
			 getAllRecordsFromTable(pst);
		} 
		catch (SQLException e) 
    	{
			e.printStackTrace();
		}
		
  	tblShow.setItems(list);//5
    	
    }

    @FXML
    void doShow(ActionEvent event) 
    {
    	String name=comboName.getSelectionModel().getSelectedItem();
    	java.sql.Date swfrom=null;
    	java.sql.Date swto=null;
    	
    	LocalDate lwfrom=dtpFrom.getValue();
    	LocalDate lwto=dtpTo.getValue();
    	
    	swfrom= java.sql.Date.valueOf(lwfrom);
    	swto= java.sql.Date.valueOf(lwto);
			
		try {
			
			 PreparedStatement  pst=(PreparedStatement) con.prepareStatement("select * from variationtable where DOS>=? and DOS<=? and CName=?");
			 
			 pst.setDate(1, swfrom);
			 System.out.println(swfrom);
			 pst.setDate(2, swto);
			 System.out.println(swto);
			 pst.setString(3, name);
			 System.out.println(name);
			 getAllRecordsFromTable(pst);
			 
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		
 	tblShow.setItems(list);//5
    }
    
    
    ResultSet table;
    ObservableList<variationBean> list;
    
    void getAllRecordsFromTable(PreparedStatement pst)//2
    {
    	list=FXCollections.observableArrayList();
    	try {
			
    		 table=	pst.executeQuery();
		while(table.next())
		{
			String name=table.getString("CName");
			float cqty=table.getFloat("CQty");
			float bqty=table.getFloat("BQty");
			String date=table.getString("DOS");
		
			variationBean obj=new variationBean(name,date,cqty,bqty);
			list.add(obj);
			//System.out.println(name+"\t"+mob+"\t"+add+"\t"+cqty+"\t"+cprice+"\t"+bqty+"\t"+bprice+"\t"+date);
			
		}
		} 
    	catch (SQLException e) 
    	{
			e.printStackTrace();
		}
    }
    
    
    
    void fillCombo()
    {
    	//comboDate.getItems().clear();
    	ArrayList<String> namesArray=new ArrayList<>();
    	try {
			PreparedStatement pst=(PreparedStatement)con.prepareStatement("select distinct CName from variationtable");
			ResultSet table=pst.executeQuery();
		
		while(table.next())
		{
			String name=table.getString("CName");
			namesArray.add(name);
		}
		} 
    	catch (SQLException e) 
    	{
			e.printStackTrace();
		}
    	comboName.getItems().addAll(namesArray);
    }  
    
    
    @SuppressWarnings("unchecked")
	void addColumns()
    {
    	//4
     	TableColumn<variationBean, String> Cname=new TableColumn<variationBean, String>("Name");//Dikhava Title
     	Cname.setCellValueFactory(new PropertyValueFactory<>("name"));//bean field name not table col. name
     	
     	TableColumn<variationBean, String> date=new TableColumn<variationBean, String>("Date of Start");//Dikhava Title
     	date.setCellValueFactory(new PropertyValueFactory<>("date"));//bean field name not table col. name
     	
     	
     	TableColumn<variationBean, Float> cqty=new TableColumn<variationBean, Float>("Cow Milk Qty.");//Dikhava Title
     	cqty.setCellValueFactory(new PropertyValueFactory<>("cqty"));//bean field name not table col. name
     	
     	
     	TableColumn<variationBean, Float> bqty=new TableColumn<variationBean, Float>("Buffalo Milk Qty.");//Dikhava Title
     	bqty.setCellValueFactory(new PropertyValueFactory<>("bqty"));//bean field name not table col. name
     	
     	
     	
     	tblShow.getColumns().clear();
     	tblShow.getColumns().addAll(Cname,date,cqty,bqty); 
    }

    

    @FXML // This method is called by the FXMLLoader when initialization is complete
    void initialize() {
        assert comboName != null : "fx:id=\"comboName\" was not injected: check your FXML file 'variationView.fxml'.";
        assert dtpFrom != null : "fx:id=\"dtpFrom\" was not injected: check your FXML file 'variationView.fxml'.";
        assert dtpTo != null : "fx:id=\"dtpTo\" was not injected: check your FXML file 'variationView.fxml'.";
        assert tblShow != null : "fx:id=\"tblShow\" was not injected: check your FXML file 'variationView.fxml'.";

        con= DBConnection.doConnect();//1
        fillCombo();
        addColumns();
    }
}
